Testing halfAdder function
(low,low,(low,low))
(low,high,(high,low))
(high,low,(high,low))
(high,high,(low,high))

Testing halfAdder reify
------------------------------------------------------------------------------
-- Inputs                                                                   --
------------------------------------------------------------------------------
i0-in : B
i1-in : B
------------------------------------------------------------------------------
-- Outputs                                                                  --
------------------------------------------------------------------------------
o0-out : B <- o0-2 : B
o1-out : B <- o0-4 : B
------------------------------------------------------------------------------
-- Types                                                                    --
------------------------------------------------------------------------------
i0-2 : B
i1-2 : B
o0-2 : B
i0-4 : B
i1-4 : B
o0-4 : B
o0-out : B
o1-out : B
i0-in : B
i1-in : B
------------------------------------------------------------------------------
-- Entities                                                                 --
------------------------------------------------------------------------------
(4) Bool::and2
      out o0-4 : B
      in  i0-4 : B <- i0-in : B
      in  i1-4 : B <- i1-in : B
      eq  [B,i0,i1,o0]

(2) Bool::xor2
      out o0-2 : B
      in  i0-2 : B <- i0-in : B
      in  i1-2 : B <- i1-in : B
      eq  [B,i0,i1,o0]

------------------------------------------------------------------------------
Testing fullAdder function
(low,low,low,(low,low))
(low,low,high,(high,low))
(low,high,low,(high,low))
(low,high,high,(low,high))
(high,low,low,(high,low))
(high,low,high,(low,high))
(high,high,low,(low,high))
(high,high,high,(high,high))

Testing fullAdder reify
------------------------------------------------------------------------------
-- Inputs                                                                   --
------------------------------------------------------------------------------
i0-in : B
i1-in : B
i2-in : B
------------------------------------------------------------------------------
-- Outputs                                                                  --
------------------------------------------------------------------------------
o0-out : B <- o0-2 : B
o1-out : B <- o0-5 : B
------------------------------------------------------------------------------
-- Types                                                                    --
------------------------------------------------------------------------------
i0-2 : B
i1-2 : B
o0-2 : B
i0-3 : B
i1-3 : B
o0-3 : B
i0-5 : B
i1-5 : B
o0-5 : B
i0-6 : B
i1-6 : B
o0-6 : B
i0-7 : B
i1-7 : B
o0-7 : B
o0-out : B
o1-out : B
i0-in : B
i1-in : B
i2-in : B
------------------------------------------------------------------------------
-- Entities                                                                 --
------------------------------------------------------------------------------
(5) Bool::xor2
      out o0-5 : B
      in  i0-5 : B <- o0-6 : B
      in  i1-5 : B <- o0-7 : B
      eq  [B,i0,i1,o0]

(7) Bool::and2
      out o0-7 : B
      in  i0-7 : B <- i1-in : B
      in  i1-7 : B <- i2-in : B
      eq  [B,i0,i1,o0]

(6) Bool::and2
      out o0-6 : B
      in  i0-6 : B <- o0-3 : B
      in  i1-6 : B <- i0-in : B
      eq  [B,i0,i1,o0]

(2) Bool::xor2
      out o0-2 : B
      in  i0-2 : B <- o0-3 : B
      in  i1-2 : B <- i0-in : B
      eq  [B,i0,i1,o0]

(3) Bool::xor2
      out o0-3 : B
      in  i0-3 : B <- i1-in : B
      in  i1-3 : B <- i2-in : B
      eq  [B,i0,i1,o0]

------------------------------------------------------------------------------
Testing wordAdder function
(low,0,0,(0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~ ...,low))
(low,0,1,(1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~ ...,low))
(low,0,2,(2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~ ...,low))
(low,0,3,(3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~ ...,low))
(low,1,0,(1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~ ...,low))
(low,1,1,(2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~ ...,low))
(low,1,2,(3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~ ...,low))
(low,1,3,(0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~ ...,high))
(low,2,0,(2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~ ...,low))
(low,2,1,(3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~ ...,low))
(low,2,2,(0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~ ...,high))
(low,2,3,(1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~ ...,high))
(low,3,0,(3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~ ...,low))
(low,3,1,(0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~ ...,high))
(low,3,2,(1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~ ...,high))
(low,3,3,(2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~ ...,high))
(high,0,0,(1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~ ...,low))
(high,0,1,(2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~ ...,low))
(high,0,2,(3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~ ...,low))
(high,0,3,(0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~ ...,high))
(high,1,0,(2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~ ...,low))
(high,1,1,(3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~ ...,low))
(high,1,2,(0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~ ...,high))
(high,1,3,(1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~ ...,high))
(high,2,0,(3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~ ...,low))
(high,2,1,(0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~ ...,high))
(high,2,2,(1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~ ...,high))
(high,2,3,(2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~ ...,high))
(high,3,0,(0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~  0 :~ ...,high))
(high,3,1,(1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~  1 :~ ...,high))
(high,3,2,(2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~  2 :~ ...,high))
(high,3,3,(3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~  3 :~ ...,high))

Testing wordAdder reify
------------------------------------------------------------------------------
-- Inputs                                                                   --
------------------------------------------------------------------------------
i0-in : B
i1-in : 2U
i2-in : 2U
------------------------------------------------------------------------------
-- Outputs                                                                  --
------------------------------------------------------------------------------
o0-out : 2U <- o0-2 : 2U
o1-out : B <- o0-16 : B
------------------------------------------------------------------------------
-- Types                                                                    --
------------------------------------------------------------------------------
i0-2 : 2U
o0-2 : 2U
i0-3 : B
i1-3 : B
o0-3 : 2U
i0-4 : B
i1-4 : B
o0-4 : B
i0-5 : B
i1-5 : B
o0-5 : B
i0-6 : 2U
o0-6 : B
i0-8 : 2U
o0-8 : B
i0-9 : B
i1-9 : B
o0-9 : B
i0-10 : B
i1-10 : B
o0-10 : B
i0-11 : 2U
o0-11 : B
i0-12 : 2U
o0-12 : B
i0-13 : B
i1-13 : B
o0-13 : B
i0-14 : B
i1-14 : B
o0-14 : B
i0-15 : B
i1-15 : B
o0-15 : B
i0-16 : B
i1-16 : B
o0-16 : B
i0-17 : B
i1-17 : B
o0-17 : B
i0-18 : B
i1-18 : B
o0-18 : B
o0-out : 2U
o1-out : B
i0-in : B
i1-in : 2U
i2-in : 2U
------------------------------------------------------------------------------
-- Entities                                                                 --
------------------------------------------------------------------------------
(16) Bool::xor2
      out o0-16 : B
      in  i0-16 : B <- o0-17 : B
      in  i1-16 : B <- o0-18 : B
      eq  [B,i0,i1,o0]

(18) Bool::and2
      out o0-18 : B
      in  i0-18 : B <- o0-11 : B
      in  i1-18 : B <- o0-12 : B
      eq  [B,i0,i1,o0]

(17) Bool::and2
      out o0-17 : B
      in  i0-17 : B <- o0-10 : B
      in  i1-17 : B <- o0-13 : B
      eq  [B,i0,i1,o0]

(2) Matrix::signalMatrixBoolToSignalUnsigned
      out o0-2 : 2U
      in  i0-2 : 2U <- o0-3 : 2U
      eq  [i0,o0]

(3) Matrix::matrixSignalBoolToSignalMatrixBool
      out o0-3 : 2U
      in  i0-3 : B <- o0-4 : B
      in  i1-3 : B <- o0-9 : B
      eq  [B,i0,i1]
      eq  [2U,o0]

(9) Bool::xor2
      out o0-9 : B
      in  i0-9 : B <- o0-10 : B
      in  i1-9 : B <- o0-13 : B
      eq  [B,i0,i1,o0]

(13) Bool::xor2
      out o0-13 : B
      in  i0-13 : B <- o0-14 : B
      in  i1-13 : B <- o0-15 : B
      eq  [B,i0,i1,o0]

(15) Bool::and2
      out o0-15 : B
      in  i0-15 : B <- o0-6 : B
      in  i1-15 : B <- o0-8 : B
      eq  [B,i0,i1,o0]

(14) Bool::and2
      out o0-14 : B
      in  i0-14 : B <- o0-5 : B
      in  i1-14 : B <- i0-in : B
      eq  [B,i0,i1,o0]

(10) Bool::xor2
      out o0-10 : B
      in  i0-10 : B <- o0-11 : B
      in  i1-10 : B <- o0-12 : B
      eq  [B,i0,i1,o0]

(12) Bits::testABit
      out o0-12 : B
      in  i0-12 : 2U <- i2-in : 2U
      eq  [B,o0]
      eq  [2U,i0]

(11) Bits::testABit
      out o0-11 : B
      in  i0-11 : 2U <- i1-in : 2U
      eq  [B,o0]
      eq  [2U,i0]

(4) Bool::xor2
      out o0-4 : B
      in  i0-4 : B <- o0-5 : B
      in  i1-4 : B <- i0-in : B
      eq  [B,i0,i1,o0]

(5) Bool::xor2
      out o0-5 : B
      in  i0-5 : B <- o0-6 : B
      in  i1-5 : B <- o0-8 : B
      eq  [B,i0,i1,o0]

(8) Bits::testABit
      out o0-8 : B
      in  i0-8 : 2U <- i2-in : 2U
      eq  [B,o0]
      eq  [2U,i0]

(6) Bits::testABit
      out o0-6 : B
      in  i0-6 : 2U <- i1-in : 2U
      eq  [B,o0]
      eq  [2U,i0]

------------------------------------------------------------------------------
